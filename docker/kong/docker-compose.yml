version: "3.3"
services:
  # kong-migrations:
  #   image: "${KONG_DOCKER_TAG:-kong:latest}"
  #   command: kong migrations bootstrap
  #   depends_on:
  #     - db
  #   environment:
  #     KONG_DATABASE: postgres
  #     KONG_PG_DATABASE: kong
  #     KONG_PG_HOST: db
  #     KONG_PG_USER: kong
  #     KONG_PG_PASSWORD: kong
  #   networks:
  #     - database
  #   restart: on-failure
  #   deploy:
  #     restart_policy:
  #       condition: on-failure

  # kong-migrations-up:
  #   image: "${KONG_DOCKER_TAG:-kong:latest}"
  #   command: kong migrations up && kong migrations finish
  #   depends_on:
  #     - db
  #   environment:
  #     KONG_DATABASE: postgres
  #     KONG_PG_DATABASE: kong
  #     KONG_PG_HOST: db
  #     KONG_PG_USER: kong
  #     KONG_PG_PASSWORD: kong
  #   networks:
  #     - database
  #   restart: on-failure
  #   deploy:
  #     restart_policy:
  #       condition: on-failure
  # konga-init:
  #   image: 'pantsel/konga:latest'
  #   command: -c prepare -a postgres -u postgresql://kong:kong@db:5432/kong
  #   environment:
  #     DB_ADAPTER: postgres
  #     DB_HOST: db
  #     DB_PORT: 5432
  #     DB_USER: kong
  #     DB_PASSWORD: kong
  #     DB_DATABASE: kong
  #   depends_on:
  #     - db
  #   networks:
  #     - database
  #   restart: on-failure
  #   deploy:
  #     restart_policy:
  #       condition: on-failure

  kong:
    image: "${KONG_DOCKER_TAG:-kong:latest}"
    container_name: kong
    user: "${KONG_USER:-kong}"
    depends_on:
      - db
    environment:
      KONG_ADMIN_ACCESS_LOG: /dev/stdout
      KONG_ADMIN_ERROR_LOG: /dev/stderr
      KONG_ADMIN_LISTEN: '0.0.0.0:8001'
      KONG_CASSANDRA_CONTACT_POINTS: db
      KONG_DATABASE: postgres
      KONG_PG_DATABASE: kong
      KONG_PG_HOST: db
      KONG_PG_USER: kong
      KONG_PROXY_ACCESS_LOG: /dev/stdout
      KONG_PROXY_ERROR_LOG: /dev/stderr
      KONG_PG_PASSWORD: kong
    networks:
      - frontend
      - backend
      - database
    ports:
      - 8000:8000
      - 8001:8001
#      - 8443:8443
#      - 8444:8444
    healthcheck:
      test: ["CMD", "kong", "health"]
      interval: 10s
      timeout: 10s
      retries: 10
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
    
  db:
    image: postgres:9.6
    container_name: kong_db
    environment:
      POSTGRES_DB: kong
      POSTGRES_USER: kong
      POSTGRES_PASSWORD: kong
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "${KONG_PG_USER:-kong}"]
      interval: 30s
      timeout: 30s
      retries: 3
    restart: on-failure
    deploy:
      restart_policy:
        condition: on-failure
    stdin_open: true
    tty: true
    ports:
      - 5432:5432    
    networks:
      - database
    volumes:
      - kong_data:/var/lib/postgresql/data

  konga:
    image: 'pantsel/konga:latest'
    container_name: konga
    restart: always
    environment:
      DB_ADAPTER: postgres
      DB_HOST: db
      DB_PORT: 5432
      DB_USER: kong
      DB_PASSWORD: kong
      DB_DATABASE: kong      
      NODE_ENV: production
      NODE_TLS_REJECT_UNAUTHORIZED: 0
      KONG_ADMIN_URL: http://kong:8001
    depends_on:
      - kong
    ports:
      - 1337:1337
    expose:
      - 1337
    networks:
      - database
      - backend
      - frontend

networks:
  database:
  backend:
  frontend:

volumes:
  kong_data: {}